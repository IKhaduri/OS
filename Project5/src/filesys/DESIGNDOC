       	       	     +-------------------------+
		     |		CS 140	       |
		     | PROJECT 4: FILE SYSTEMS |
		     |	   DESIGN DOCUMENT     |
		     +-------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

დავით აკოფოვი   <dav23r@gmail.com>
ნიკა დონაძე     <nikadon.net@gmail.com>
ბექა მაისურაძე  <fcb10lal24@gmail.com>
ირაკლი ხადური   <iraklixaduri@gmail.com>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.
https://en.wikipedia.org/wiki/Inode
https://en.wikipedia.org/wiki/Inode_pointer_structure

		     INDEXED AND EXTENSIBLE FILES
		     ============================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

/* In-memory inode. */
struct inode
  {
    struct list_elem elem;              /* Element in inode list. */
    block_sector_t sector;              /* Sector number of disk location. */
    int open_cnt;                       /* Number of openers. */
    bool removed;                       /* True if deleted, false otherwise. */
    int deny_write_cnt;                 /* 0: writes ok, >0: deny writes. */
    uint32_t is_dir;                    /* True if directory. */
    off_t length;                       /* Length of data encapsulated by inode. */
  };


  /* On-disk inode.
     Must be exactly BLOCK_SECTOR_SIZE bytes long. */
  struct inode_disk
    {
  	  off_t length;                           /* File size in bytes. */
      unsigned magic;                         /* Magic number. */
  	  uint32_t flags;							            /* Flags */
  	  block_sector_t dir[ON_INODE_DIR_SIZE];	/* Inode sector directory. */
    };

inode ის სტრუქტურიდან წავშალეთ inode_disk ზე მიმთითებელი, ანუ
inode ის მთავარ სექტორს ვკითხულობთ "lazy" სტილში, როდესაც დაგვჭირდება.
ამასთანავე დავამატეთ is_dir და length პარამეტრები inode_disk იდან,
ის მინიმუმი რაც inode მა უნდა იცოდეს თავის შესახებ ქონთენთისგან დამოუკიდებლად.

>> A2: What is the maximum size of a file supported by your inode
>> structure?  Show your work.

#define ON_INODE_DIR_SIZE 125
#define REDIRECTION_LEVEL 3

inode ში ენკაპსულირებული მონაცემები შენახულია indirection ის საშუალებით.
მთავარი სექტორში არის 125 სექტორის ნომრის შენახვის საშუალებით, შემდეგ
სექტორებში კი 128 (512 / 4)

[data sector] - sector which stores actual data

    LEVEL1              LEVEL2                  ...               LEVELN

                /-----> /----\              -->/----\             /----\
                |       |----|  ---->          |----| ->          |----|   ---> [data sector]
                |       |----|  ---->          |----| ->          |----|   ---> [data sector]
  inode_disk    |        ....                   ....               ....
    /-----\     |       \----/                 \----/             \----/
    |-----|  ---/
    |-----|  -------->  /----\              -->/----\             /----\
    |-----|  ---\       |----|  ---->          |----| ->          |----|   ---> [data sector]
      ...       |       |----|  ---->          |----| ->          |----|   ---> [data sector]
    \-----/     |        ....                   ....               ....
                |       \----/                 \----/             \----/
                |
                \---->  /----\              -->/----\             /----\
                        |----|  ---->          |----| ->          |----|   ---> [data sector]
                        |----|  ---->          |----| ->          |----|   ---> [data sector]
                         ....                   ....               ....
                        \----/                 \----/             \----/

                       ........               .........          ........

ამდაგვარად სტრუქტურა იძლევა 125 * ( 128 ** (INDIRECTION_LEVEL - 1) ) * 512
ბაიტის შენახვის საშუალებას. INDIRECTION_LEVEL ის გაზრდით მაქსიმალური ზომაც
ექსპონენციალურად იზრდება. 7Mb ის შესანახად საკმარისია 3ზომის გადამისამართება.

N.B.
მონაცემები ყოველთვის შენახულია სტრუქტურის ბოლო level -ში.
INDIRECTION ცხრილების ალოკაცია ხდება საჭიროების მიხედვით.
როდესაც გვჭირდება მე-n სექტორი ვაკეთებთ ასეთ რამეს:
n რიცხვს წარმოვადგენთ 128 ობით სისტემაში (შევნიშნოთ
რომ პირველ ცხრილში ეს რიცხი 125 მდე უნდა იყოს).

      [0-125] [0-128] [0-128] ... [0-128]

შემდეგ ხეს გადავუყვებით და ყოველ ცხრილში ვირჩევთ მომდევნო
'ციფრის' სექტორს.


---- SYNCHRONIZATION ----

>> A3: Explain how your code avoids a race if two processes attempt to
>> extend a file at the same time.
ჩვენ დიზაინში ნებისმიერ სექტორთან IO, მათ შორის inode ის მთავარი
და indirection სექტორებთან (გარდა freemap)  ხდება ქეშის შუამავლობით.
ამიტომ, სინქრონიზაციის მექანიზმები ჩადებულია ქეშში.
როდესაც პროცესი ხვდება რომ ფაილს სჭირდება გაზრდა, მას უკვე აღებული აქვს
მთავარი სექტორის ქეშ სტრუქტურა write ფერმიშენით. ეს იმას ნიშნავს რომ
ეს სექტორი ქეშში სხვებისთვის მიუწვდომელია write ფერმიშენით. სანამ ჩვენი პროცესი
არ გაზრდის ფაილს და არ გაუშვებს ლოქს. შესაბამისად სხვა პროცესი,
რომელსაც უნდა write ვერ აიღებს მთავარ სექტორს write ფერმიშენით და
დალოდება მოუწევს.


>> A4: Suppose processes A and B both have file F open, both
>> positioned at end-of-file.  If A reads and B writes F at the same
>> time, A may read all, part, or none of what B writes.  However, A
>> may not read data other than what B writes, e.g. if B writes
>> nonzero data, A is not allowed to see all zeros.  Explain how your
>> code avoids this race.
წაკითვისას ქეშიდან ვიღებს სექტორს write ფერმიშენის გარეში, ეს იმას
ნიშნავს რომ ქეში ამ სექტორს არ დაბლოკავს. მაგრამ მეორე პროცესს ნახავს
length ის გაზრდილ მნიშვნელობას მხოლოდ მაშინ როდესაც პირველი პროცესი
დაამთავრებს ფაილის გაზრდასა და შევსებას. სიგრძის გარზრდა კოდის ბოლოში
წერია.

>> A5: Explain how your synchronization design provides "fairness".
>> File access is "fair" if readers cannot indefinitely block writers
>> or vice versa.  That is, many processes reading from a file cannot
>> prevent forever another process from writing the file, and many
>> processes writing to a file cannot prevent another process forever
>> from reading the file.
ეს მიღწეულია ქეშის ინტერფეისში ორი mode ით, ერთი როდესაც მოვითხოვთ
სექტორს write ფერმიშენით და ჩაწერას უფლება გვექნება, და მეორე -
როდესაც სექტორს ვიღებთ write ის გარეში, ასეთ შემთხვევაში ის არ უნდა
ვცვალოთ.
დაბლოკვა (ლოქის აღება) ხდება მხოლოდ write mode ში. შესაბამისად
reader და writer ები ერთმანეთს ხელს არ უშლიან.

---- RATIONALE ----

>> A6: Is your inode structure a multilevel index?  If so, why did you
>> choose this particular combination of direct, indirect, and doubly
>> indirect blocks?  If not, why did you choose an alternative inode
>> structure, and what advantages and disadvantages does your
>> structure have, compared to a multilevel index?
ინოუდის სტრუქტურა multilevel index -ს წარმოადგენს. indirection level
ყოველთვის მაქსიმალურია (ხის სიღრმე). ჩვენი აზრით ეს უფრო მარტივი,
თვალსაჩინო და scalable მიდგომაა ფაილის მაქსიმალური ზომის გაზრდის მხრივ.

			    SUBDIRECTORIES
			    ==============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

struct dir
  {
    struct inode *inode;                /* Backing store. */
    off_t pos;                          /* Current position. */
    struct lock dir_lock;               /* To serialize access to some segments. */
  };

ჩვენ ქვედირექტორიების სისტემა დავაშენეთ დირექტორიების არსებულ ფუნქციონაზე,
კოდის ნაწილების განზოგადებით და რიგ შემთხვევებში ინტერფეისის შეცვლითაც.
dir სტრუქტურაში dir_lock გამოიყენება read/write სერიალიზაციისთვის ფაილის
(დირექტორიის) დონეზე. დირექტორიაში ახალი მეფინგის დამატება, მოძებნა, წაშლა
არის სერიალიზებული ამ ლოქის საშუალებით.


struct thread
  {
    ...
    struct dir *pwd;                           /* Current working directory */
    ...
  }
სრედი ამიერიდან ინახავს თავის working directory -ს. 'init' სრედისთვის
ინიციალიზაციისას pwd ისეტება root ად (init.c -ში), ხოლო პროცესების ხის სხვა
სრედებს pwd გადაეცემა მემკვიდრეობითად: სანამ start_process -ში პოინტერი გადახტება
userprog სექმენტზე, ხდება parent ის pwdს კოპირება dir_reopen ის საშუალებით.
chdir ცვლის current thread ის pwd -ს მხოლოდ.


---- ALGORITHMS ----

>> B2: Describe your code for traversing a user-specified path.  How
>> do traversals of absolute and relative paths differ?
გვაქვს ფუნქცია
bool approach_leaf(const char *path,
                   struct dir **containing_dir,
                   char *filename);
მას გადაეცემა გასაპარსი path, მიმთითებელი დირექტორიის მიმთითებელზე
სადაც ჩაიწერება leaf ის parent დირექტორია, და filename მისამართი
სადაც ჩაიწერება leaf ის მნიშვნელობა.
მაგ : a/b/c
      containing dir:  b
      filename:       "c"
ეს მიდგომა კარგად უმკლავდება გაპარსვის ამოცანას, და ამასთანავე
საკმარისად ზოგადია add, remove, read_dir ოპერაციებისთვის გამოსაყენებლად.
ფუნქცია აბრუნებს boolean მნიშვნელობას იმის მიხედვით არის თუ არა path
ვალიდური.
ფუნქციის შიგნით path absolute თუ relative არის პირველი character ით
მოწმდება: '/' ნიშნავს absolute -ს.
absolute ის შემთხვევაში გადაყოლას ვიწყებთ ახლად გახსნილი root დირექტორიით,
relative ის დროს კი - ახლად გახსნილი current process ის pwd დირექტორიით.
შემდგომი გადაყოლა ორივე შემთხვევაში იდენტურია.

---- SYNCHRONIZATION ----

>> B4: How do you prevent races on directory entries?  For example,
>> only one of two simultaneous attempts to remove a single file
>> should succeed, as should only one of two simultaneous attempts to
>> create a file with the same name, and so on.
დირექტორიებზე პრაქტიკულა ყველა ოპერაცია სერიალიზებული dir_lock ის
საშუალებით მთლიანი დირექტორიის დონეზე, შესაბამისად race condition
ები გამორიცხულია. ეს მიდგომა საკმაოდ მარტივია და გაპარალელება არ
ღირს იმ complexity ს დასამატებლად რაც მას მოჰყვება, გათვალისწინებით
იმისა რომ საშუალოდ entry ების რაოდენობა ერთ დირექტორიაში არც ისე
დიდია.

>> B5: Does your implementation allow a directory to be removed if it
>> is open by a process or if it is in use as a process's current
>> working directory?  If so, what happens to that process's future
>> file system operations?  If not, how do you prevent it?
ჩვენი იმპლემენტაცია აძლევს საშუალებას დირექტორია რომელიც გახსნილია
სხვაგან, ან გამოყენებულია pwd ის ფორმით 'წაიშალოს'. თუმცა 'წაშლა'
ხდება inode ის ინტერფეისით, რაც removed ბიტს სეტავს. ამდაგვარად,
დირექტორიის რეალური ქონთენთი წაიშლება მხოლოდ მაშინ როდესაც open_count
გაუტოლდება ნულს.
removed ფაილის ხელახლა გახსნას ვბლოკავთ file_open და dir_open ში
შესაბამისი შემოწმების დამატებით. წაშლილილ დირექტორიაში ფაილის დასამატებლად
ეს დირექტორია უნდა გაიხსნას, ანუ დაბლოკვლის მექანიზმი ამ პრობლემასაც
აგვარებს.

---- RATIONALE ----

>> B6: Explain why you chose to represent the current directory of a
>> process the way you did.

			     BUFFER CACHE
			     ============

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> C2: Describe how your cache replacement algorithm chooses a cache
>> block to evict.

>> C3: Describe your implementation of write-behind.

>> C4: Describe your implementation of read-ahead.

---- SYNCHRONIZATION ----

>> C5: When one process is actively reading or writing data in a
>> buffer cache block, how are other processes prevented from evicting
>> that block?

>> C6: During the eviction of a block from the cache, how are other
>> processes prevented from attempting to access the block?

---- RATIONALE ----

>> C7: Describe a file workload likely to benefit from buffer caching,
>> and workloads likely to benefit from read-ahead and write-behind.

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students in future quarters?

>> Any other comments?
