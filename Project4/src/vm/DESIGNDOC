        +---------------------------+
		    | CS 140                    |
		    | PROJECT 3: VIRTUAL MEMORY	|
		    |	DESIGN DOCUMENT           |
		    +---------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Nikoloz Donadze ndona14@freeuni.edu.ge
Irakli Khaduri ikhad14@freeuni.edu.ge
Beka Maisuradze bmaisu14@freeuni.edu.ge
Davit Akopov dakop14@freeuni.edu.ge

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.
We watched this very cool explanation on 'Virtual Memory'
ჩვენ ვუყურეთ ამ ძალიან კარგ ახსნას ვირტუალური მეხსიერების უკეთ გასაგებად:
https://www.youtube.com/watch?v=qcBIvnQt0Bw&list=PLiwt1iVUib9s2Uo5BeYmwkDFUh70fJPxX
by David Black-Schaffer

			PAGE TABLE MANAGEMENT
			=====================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

Following three structures are used as part of implementation of 
supplemental page table


Signifies location of the data mapped. 
RAM means that it is loaded in physical memory and placed in page directory.
SWAP and FILE correspondingly mean that data is currently located in swap
block and data is mapped to a file.
enum suppl_page_location {
	PG_LOCATION_UNKNOWN,
	PG_LOCATION_RAM,
	PG_LOCATION_SWAP,
	PG_LOCATION_FILE
};

Represents page of SPT. vaddr is the process virtual address,
kaddr is physical frame (identified by kernel virual address),
mapping pointer points to file mapping described above,
dirty bit has it's conventional meaning and tells if data has
been changed and consequently should be written back to file
Only neccessarry variales are initialized depending on the
'location', the rest are set to default. 
struct suppl_page {
    uint32_t vaddr;
    uint32_t kaddr;
    struct file_mapping *mapping;
    enum suppl_page_location location;
    bool dirty;
    struct hash_elem hash_elem;
};

SPT structure. Supplemental page table is per-process data structures.
owner_thread is pointer to the thread it belongs to,
pages_map is hash table that stores pages of SPT.
struct suppl_pt {
	struct thread *owner_thread;
	struct hash pages_map;
};


---- ALGORITHMS ----

>> A2: In a few paragraphs, describe your code for accessing the data
>> stored in the SPT about a given page.
SPT არის SP ჰეშმეპი, სადაც ვირტუალური მისამართით ხდება ელემენტზე 
მიმართვა. დანარჩენი ინფორმაცია მთლიანად წერია SP-ში, ზემოთ
აღწერილი სტრუქტურების და ენამების მიხედვით. ანუ თავიდან, ვამრგვალებთ
მისამართს (რომ სწორ ფეიჯზე მიუთითოს) ვეძებთ ჰეშმეპით SP-ს და ნაპოვნ
ფეიჯში წერია ყველა საჭირო ინფორმაცია. (SPT გვაქვს per-thread ლოგიკით).


>> A3: How does your code coordinate accessed and dirty bits between
>> kernel and user virtual addresses that alias a single frame, or
>> alternatively how do you avoid the issue?

---- SYNCHRONIZATION ----

>> A4: When two user processes both need a new frame at the same time,
>> how are races avoided?

---- RATIONALE ----

>> A5: Why did you choose the data structure(s) that you did for
>> representing virtual-to-physical mappings?

		       PAGING TO AND FROM DISK
		       =======================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> B2: When a frame is required but none is free, some frame must be
>> evicted.  Describe your code for choosing a frame to evict.

>> B3: When a process P obtains a frame that was previously used by a
>> process Q, how do you adjust the page table (and any other data
>> structures) to reflect the frame Q no longer has?

>> B4: Explain your heuristic for deciding whether a page fault for an
>> invalid virtual address should cause the stack to be extended into
>> the page that faulted.

---- SYNCHRONIZATION ----

>> B5: Explain the basics of your VM synchronization design.  In
>> particular, explain how it prevents deadlock.  (Refer to the
>> textbook for an explanation of the necessary conditions for
>> deadlock.)

>> B6: A page fault in process P can cause another process Q's frame
>> to be evicted.  How do you ensure that Q cannot access or modify
>> the page during the eviction process?  How do you avoid a race
>> between P evicting Q's frame and Q faulting the page back in?

>> B7: Suppose a page fault in process P causes a page to be read from
>> the file system or swap.  How do you ensure that a second process Q
>> cannot interfere by e.g. attempting to evict the frame while it is
>> still being read in?

>> B8: Explain how you handle access to paged-out pages that occur
>> during system calls.  Do you use page faults to bring in pages (as
>> in user programs), or do you have a mechanism for "locking" frames
>> into physical memory, or do you use some other design?  How do you
>> gracefully handle attempted accesses to invalid virtual addresses?

---- RATIONALE ----

>> B9: A single lock for the whole VM system would make
>> synchronization easy, but limit parallelism.  On the other hand,
>> using many locks complicates synchronization and raises the
>> possibility for deadlock but allows for high parallelism.  Explain
>> where your design falls along this continuum and why you chose to
>> design it this way.

			 MEMORY MAPPED FILES
			 ===================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

Following two structures ares used as part of 'mmap' implementation.

This unit alongside with pointer to file structure and it's size stores
the lowest virtual address that is mapped to this file (it's first byte).
The pages in supplemental page table points to this structure, and the byte
to be read in RAM can be determined by offset (vaddr - start_vaddr) 
struct file_mapping {
	struct file *fl;
    	int file_size;
	void *start_vaddr;
};

Stores array of all mapping structures, and pool_size in order to be able
to grow this container dynamically as number of mappings exceed pool size.
struct file_mappings {
	struct file_mapping *mappings;
	int pool_size;
};

---- ALGORITHMS ----

>> C2: Describe how memory mapped files integrate into your virtual
>> memory subsystem.  Explain how the page fault and eviction
>> processes differ between swap pages and other pages.

>> C3: Explain how you determine whether a new file mapping overlaps
>> any existing segment.

---- RATIONALE ----

>> C4: Mappings created with "mmap" have similar semantics to those of
>> data demand-paged from executables, except that "mmap" mappings are
>> written back to their original files, not to swap.  This implies
>> that much of their implementation can be shared.  Explain why your
>> implementation either does or does not share much of the code for
>> the two situations.

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
