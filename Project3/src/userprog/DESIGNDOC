		     +--------------------------+
       	       	     |		CS 140		|
		     | PROJECT 2: USER PROGRAMS	|
		     | 	   DESIGN DOCUMENT     	|
		     +--------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Nikoloz Donadze ndona14@freeuni.edu.ge
Irakli Khaduri ikhad14@freeuni.edu.ge
Beka Maisuradze bmaisu14@freeuni.edu.ge
Davit Akopov dakop14@freeuni.edu.ge


---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			   ARGUMENT PASSING
			   ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

Nothing.

---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?

We disassemble the command with strtok_r() and fill the stack 
with it, but in reverse order, to fill the stack in correct order.



---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?

The reason is multithreaded environment. strtok() is not 
thread-safe, since it uses a global static information holding
mechanism, so thread interleaving will most probably ruin it.
strtok_r() on the other hand, is a very viable solution that
has no global usage of variables.

>> A4: In Pintos, the kernel separates commands into a executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.

Less time spent in kernel and shell can do more than just
separate, it can preprocess stuff and not have to call
system calls unnecessarily.

			     SYSTEM CALLS
			     ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.
int struct thread
	const char *executable_name; /*the name of the process */
	int exit_status;    /*the status set by process upon exit   */
    	uint32_t *pagedir;                  /* Page directory. */
	struct list child_list;    /*child process list*/
	struct list_elem child_elem; /*element with which's help child process is added to list */
	struct semaphore child_lock; /*To make operation on child list atomic  */
	struct semaphore wait_lock; /*To wait for thread's death and not use busy waiting scheme*/
	struct semaphore zombie_lock;/*Parent thread must allow child's death, if parent thread dies, it sets all of its children's semas to 1*/
	struct thread *parent; /*parent process */
	struct file* open_files[MAX_OPEN_FILES]; /*files opened by this process*/
	bool load_status; /*load successful or not */
	struct semaphore load_lock; /*To wait for successful load and be sure it happened*/

struct lock filesys_lock; /*To make access to file system atomic*/
typedef int file_descriptor; /*number which is a file descriptor*/
>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?

File descriptors are per-thread. Our interface allows us to ask
about file to thread bay fd and file * is returned, (struct file* wasn't
written by us(default file system structure)). The thread simply knows
the mapping between its file descriptors and real files.
Now thread has a fixed size file descriptor array. Below we have
an interface which doesn't show user that the array is fixed size
so for future projects this abstraction layer will be useful.


---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.
We have simple validation of user data. We check every single byte 
pointed by the user poiner to be in user space, even '\0' of a string.
Note: Check happens in this way: we make sure, the pointer is not null,
it's below PHYS_BASE and it's also mapped to something. For any struct s
we check all sizeof(struct) bytes to ensure, the pointer is not on a buondary.

>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

Our solution is very simple. No matter what bytes are passed,
ALL of them are checked. So, there is no minimum and maximum
on valid pointers. Minimum is only achieved if the first byte
is wrong and only one check happens. There is room for 
improvement. There could be checking of consecutive bytes with only
endpoints and that could speed up the process very much. But it was
not required and we didn't write it.

>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.

First we check that the pid of child process is actually
a pid of this thread's child process. We try to take the 
wait_lock which will only be allowed after the child 
process actually dies. After this we take exit value
which is by default -1, so if anything went wrong and
thread died unexpectedly, we'll have a correct exit value.
The child process is then removed from the child list.
And zombie_lock is released for the child process
so that it's allowed to deallocate its resources.
(Child tries to acquire zombie lock upon death, every
thread releases the zombie lock of every child upon its death.)

>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

We check every user byte one by one. Validity is ensured
before kernel tries to do what user asked it. If it's an invalid
pointer, then we call exit(-1) on the process which does all of
the cleanup. As simple as that.

---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

We ensure this with load_lock. The calling process tries to
acquire the lock and can't do that before the loading 
process finishes. The lock is released no matter what( independent
of load fail or success).

>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

As mentioned before, all of these cases are regular cases
and get solved with zombie_lock and wait_lock. When a process
tries to die, it isn't allowed to do so, until a parent permits
that(to avoid trying to get information from dead threads).
If a thread dies, it releases every zombie_lock. Before zombie_lock
waiting happens on wait_lock, when we're just waiting for a normal
process to die.


---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?
 
Because it's simple, it's effective and we liked it.

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?

Advantages - simple and easy to implement. Also works.
Disadvntages - pretentious people won't like them.

>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?
We didn't change it since it made code much easier.


			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
